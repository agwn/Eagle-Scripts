#usage "<b>Extract board info, text and info for all tagged components for making a library footprint to use the module on a PCB<\b>.\n"
        "Usage: RUN exp-module-fp.ulp"
        "<author>Author: agwn</author>"

// procedure
// 1. get eagle files for module
// 2. turn into a project by creating an eagle.epf file in the dir (empty is ok)
// 3. add the attribute 'EXP2MODFP' to all headers that should be "exported to the module footprint"
// 4. add the attribute 'EXP2MODMECMNT' to all mechanical mounting points to exported
// 5. open the project and run this script on the board. the script will create a module_fp.scr
// 6. open a library to import the module footprint into
// 7. create a new footprint for the module
// 8. source the exported script 'scr module_fp' or just 'scr' and search for it
// 9. cleanup the import to remove things like random text on layers
// 10. optional: create a new symbol with the same (or less) pins than were exported
// 11. open an existing device or create a new one and using symbol for the module
// 12. add the footprint to the device, connect the pins and save the library
// 13. use the new module as a device in a new pcb! :)


real    GridDist = 50.0;
enum    {unitINCH, unitMIL, unitMM, unitMIC};
string  h, cmd = "";
int     unit = unitMIL;   // predefined unit, can be changed to unitMM, unitINCH, unitMIC
int     show_script = 1;
int     Result;
string  Status = "";


// Definitions:

// Statements:

// get project path, if in board or schematic, otherwise library path
string get_project_path()
{
  string s = "", p = "";;
  if (library)  { library(L)  s = L.name;}
  if (board)    { board(B)     s = B.name;}
  if (schematic){ schematic(S) s = S.name;}
  char c = '/';
  int pos = strrchr(s, c);
  if (pos >= 0) {
    p = strsub(s, 0, pos + 1);
  }
  return p;
}

real u2unit(int u) {
  if (unit == unitMIL)
    return u2mil(u);
  if (unit == unitMM)
    return u2mm(u);
  if (unit == unitINCH)
    return u2inch(u);
  if (unit == unitMIC)
    return u2mic(u);
}

string getPadShape(int s) {
  if (s == PAD_SHAPE_SQUARE)
    return "Square";
  if (s == PAD_SHAPE_ROUND)
    return "Round";
  if (s == PAD_SHAPE_OCTAGON)
    return "Octagon";
  if (s == PAD_SHAPE_LONG)
    return "Long";
  if (s == PAD_SHAPE_OFFSET)
    return "Offset";
}

real snap(int n) {  // returns next grid point
  return round(u2unit(n) / GridDist)   * GridDist;
}

int n = 0, x[], y[], l[], UsedLayers[];

int isNew(int X, int Y, int L) {
  for (int i = 0; i < n; i++) {
    if (x[i] == X && y[i] == Y && (l[i] == L || l[i] == LAYER_VIAS ))
      return 0;
  }
  return 1;
}

void Move(int Layer)
{
  if (UsedLayers[Layer]) {
    h = ""; sprintf(h, "DISPLAY NONE %d;\n", Layer); cmd += h;
    // Snap the signal wires and vias:
    for (int i = 0; i < n; i++) {
      if (l[i] == Layer && (u2unit(x[i]) != snap(x[i]) || u2unit(y[i]) != snap(y[i]))) {
        h = ""; sprintf(h, "MOVE (%f %f) (%f %f);\n", u2unit(x[i]), u2unit(y[i]), snap(x[i]), snap(y[i])); cmd += h;
      }
    }
  }
}


void export_brd_outline (void)
{
  board(B) {
    // CHANGE LAYER N
    // CHANGE WIDTH X
    // WIRE ['signal_name'] [width] [ROUND | FLAT] (x1 y1) [curve | @radius] (x2 y2)
    
    // set wire bend to straight lines
    //cmd += "SET WIRE_BEND 6\n";
    cmd += "SET WIRE_BEND 2\n";
    // TODO: get the curves right, remove diagonal hack

    h = "";
    sprintf(h, "CHANGE LAYER %d\n", LAYER_DIMENSION);
    cmd += h;
    B.wires(W) {
      if (W.layer == LAYER_DIMENSION) {
        h = "";
        sprintf(h, "CHANGE WIDTH %3.2f\n", u2unit(W.width));
        cmd += h;
        h = "";
        sprintf(h, "WIRE (%3.3f %3.3f) (%3.3f %3.3f)\n", u2unit(W.x1), u2unit(W.y1), u2unit(W.x2), u2unit(W.y2));
        cmd += h;
      }
    }
  }
}


void export_brd_text(void)
{
  board(B) {
    h = "";
    sprintf(h, "CHANGE LAYER %d\n", LAYER_TPLACE);
    cmd += h;
    B.texts(T) {
      if (T.layer == LAYER_TPLACE) {
        h = "";
        sprintf(h, "CHANGE SIZE %3.2f\n", u2unit(T.size));
        cmd += h;

        h = "";
        sprintf(h, "TEXT '%s' R%2.1f (%3.3f %3.3f)\n", T.value, T.angle, u2unit(T.x), u2unit(T.y));
        cmd += h;
      }
    }
    h = "";
    sprintf(h, "CHANGE LAYER %d\n", LAYER_BPLACE);
    cmd += h;

    B.texts(T) {
      if (T.layer == LAYER_BPLACE) {
        h = "";
        sprintf(h, "CHANGE SIZE %3.2f\n", u2unit(T.size));
        cmd += h;

        h = "";
        sprintf(h, "TEXT '%s' MR%2.1f (%3.3f %3.3f)\n", T.value, T.angle, u2unit(T.x), u2unit(T.y));
        cmd += h;
      }
    }
  }
}


void export_brd_wires(void)
{
  board(B) {
    // set wire bend to straight lines
    cmd += "SET WIRE_BEND 2\n";

    h = "";
    sprintf(h, "CHANGE LAYER %d\n", LAYER_TPLACE);
    cmd += h;
    B.wires(W) {
      if (W.layer == LAYER_TPLACE) {
        h = "";
        sprintf(h, "CHANGE WIDTH %3.2f\n", u2unit(W.width));
        cmd += h;
        h = "";
        sprintf(h, "WIRE (%3.3f %3.3f) (%3.3f %3.3f)\n", u2unit(W.x1), u2unit(W.y1), u2unit(W.x2), u2unit(W.y2));
        cmd += h;
      }
    }
    h = "";
    sprintf(h, "CHANGE LAYER %d\n", LAYER_BPLACE);
    cmd += h;
    B.wires(W) {
      if (W.layer == LAYER_BPLACE) {
        h = "";
        sprintf(h, "CHANGE WIDTH %3.2f\n", u2unit(W.width));
        cmd += h;
        h = "";
        sprintf(h, "WIRE (%3.3f %3.3f) (%3.3f %3.3f)\n", u2unit(W.x1), u2unit(W.y1), u2unit(W.x2), u2unit(W.y2));
        cmd += h;
      }
    }
  }
}


void export_brd_pads(void)
{
  board(B) {
    B.elements(E) {
      if (E.attribute["EXP2MODFP"]) {
        Status = "Element: "+E.name; dlgRedisplay();
        E.package.contacts(C) {
          if (C.pad) {
            h = "";
            sprintf(h, "PAD %f %s R%3.2f '%s$%s' (%3.3f %3.3f)\n",
                u2unit(C.pad.diameter[LAYER_TOP]), getPadShape(C.pad.shape[LAYER_TOP]),
                C.pad.angle, E.name, C.name, u2unit(C.pad.x), u2unit(C.pad.y));
            cmd += h;
          }
        }
      }
    }
  }
}


void export_brd_holes(void)
{
  board(B) {
    //cmd += "\n// Mechanical pads/holes\n";
    B.elements(E) {
      if (E.attribute["EXP2MODMECMNT"]) {
        Status = "Element: "+E.name; dlgRedisplay();
        E.package.contacts(C) {
          if (C.pad) {
            h = "";
            sprintf(h, "PAD %f %s R%3.2f '%s' (%3.3f %3.3f)\n",
                u2unit(C.pad.diameter[LAYER_TOP]), getPadShape(C.pad.shape[LAYER_TOP]),
                C.pad.angle, E.name, u2unit(C.pad.x), u2unit(C.pad.y));
            cmd += h;
          }
        }
      }
    }
  }
}


void Export_to_File (void)
{
  // set import units to be the same as the export units
  if (unit == unitMIL)
    cmd += "GRID MIL\n";
  if (unit == unitMM)
    cmd += "GRID MM\n";
  if (unit == unitINCH)
    cmd += "GRID INCH\n";
  if (unit == unitMIC)
    cmd += "GRID MIC\n";

  board(B) {
    // Remember the active layers:
    int ActiveLayers[];
    B.layers(L) {
      ActiveLayers[L.number] = L.visible;
    }

    // Export board outline
    export_brd_outline();

    // Export board text
    export_brd_text();

    // Export all wires used for labeling or outlining
    export_brd_wires();

    // Export all tagged connectors/headers
    export_brd_pads();

    // Export all tagged mechanical connectors
    export_brd_holes();
    
    // Export documentation only for exported parts
    // Note: should probably do this when extracting the parts
    //cmd += "\n// TODO: Export documentation for pins/mounts\n";
  }
    cmd += "GRID LAST\n";
}



//---- main ----------------------------------------------------------------------

if (!board) {
   dlgMessageBox(usage + "<hr><b>ERROR: No board!</b><p>\nThis program can only work in the board editor.");
   exit(1);
   }

dlgDialog("Export Module Footprint Data") {
  dlgHBoxLayout {
    dlgSpacing(10);
    dlgVBoxLayout {
      dlgSpacing(10);
      dlgLabel(Status, 1);
      dlgHBoxLayout {
        dlgPushButton("+&ExportModuleFP")   {Status = "Busy...";
          dlgRedisplay();
          Export_to_File();
          string dest = dlgFileSave("Save Script File", get_project_path()+"module_fp.scr", "*.scr");
          if (dest != "") output(dest, "wt") {printf(cmd);}
          dlgAccept();
        }
        dlgPushButton("-&Cancel") exit(0);
      }
      dlgSpacing(7);
    }
  }
};

Result = 1;
if (show_script) {
  Result = dlgDialog("Shows Exported Data") {
    dlgVBoxLayout {
      dlgLabel("Shows Exported Data");
      dlgTextEdit(cmd);
    }
    dlgHBoxLayout {
      dlgPushButton("OK") dlgReject();
    }
  };
}
if (!Result) exit(0);
exit(cmd);
